version: '3'
services:
    frontend-nginx:
        build:
            context: ./frontend/docker     -указываем папку с конфигурационным файлом
            dockerfile: nginx.docker       -указываем имя конфигурационнорго файла
        volumes:
            - ./frontend:/var/www/frontend
        depends_on:
            - api-php-fpm
        ports:
            - "8080:80"                    -пробрасываем порты, откртие по 8080
-----------------------------------------------------------------------------------------
1. Конфигурационный файл ./frontend/docker/nginx.docker:

FROM nginx:1.10       - образ nginx на основе которого будет строиться контейнер...

ADD ./nginx/default.conf /etc/nginx/conf.d/default.conf - команда запуска файла настройки конфигурации nginx
WORKDIR /var/www/frontend  - указываем рабочуюю папку, т.е. если мы будем пользоваться консольными командами, то по умолчанию они будут запускаться отсюда
-----------------------------------------------------------------------------------------
2. Файл дефолтных настроек nginx  ./frontend/docker//nginx/default.conf

server {
    listen 80;
    index index.html;
    root /var/www/frontend/dist; - указываем папку из которой будет открываться сайт

    location / {
        try_files $uri /index.html; - указываем файл с которого открывается сайт
    }
}
-----------------------------------------------------------------------------------------
    frontend-nodejs:                - подключаем node js, чтобы копировать сюда node_modules и не загомождать проект
        image: node:10.11-jessie    - jessie - версия операционной системы, которую будем (2.07 1 урока), alpine - минимальный образ
        volumes:
            - ./frontend:/var/www/frontend
        working_dir: /var/www/frontend
        tty: true                   - параметр чтобы node не закрывалась
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
    api-nginx:
        build:
            context: ./api/docker      -указываем папку с конфигурационным файлом
            dockerfile: nginx.docker   -указываем имя конфигурационнорго файла
        volumes:
            - ./api:/var/www/api
        ports:
            - "8081:80"                -пробрасываем порты, откртие по 8080
-----------------------------------------------------------------------------------------
1. Конфигурационный файл ./api/docker/nginx.docker:

FROM nginx:1.10   - образ nginx на основе которого будет строиться контейнер...

ADD ./nginx/default.conf /etc/nginx/conf.d/default.conf  - команда запуска файла настройки конфигурации nginx
WORKDIR /var/www/api  - указываем рабочуюю папку, т.е. если мы будем пользоваться консольными командами, то по умолчанию они будут запускаться отсюда
-----------------------------------------------------------------------------------------
2. Файл дефолтных настроек nginx  ./api/docker//nginx/default.conf

server {
    listen 80;
    index index.php index.html;
    root /var/www/api/public; - прописываем из какой папаки начинаем работу

    client_max_body_size 128m;

    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET,POST,PUT,DELETE,HEAD,OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization' always;

    location / {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET,POST,PUT,DELETE,HEAD,OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization' always;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        try_files $uri /index.php?$args;
    }

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass api-php-fpm:9000;  - указываем образение к контейнеру api-php-fpm по порту 9000
        fastcgi_index index.php; - ссылаемся на index.php
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}

-----------------------------------------------------------------------------------------
    api-php-fpm:
        build:
            context: ./api/docker       -указываем папку с конфигурационным файлом
            dockerfile: php-fpm.docker  -указываем имя конфигурационнорго файла
        volumes:
            - ./api:/var/www/api
            - ./storage:/var/www/storage
        depends_on:
            - api-postgres
            - mailer
            - rabbitmq
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
    api-php-cli:
        build:
            context: ./api/docker
            dockerfile: php-cli.docker
        volumes:
            - ./api:/var/www/api
            - ./storage:/var/www/storage
        depends_on:
            - api-postgres
            - mailer
            - rabbitmq
        working_dir: /var/www/api
        tty: true
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
    api-postgres:
        image: postgres:9.6-alpine
        volumes:
            - ./api/var/docker/postgres:/var/lib/postgresql/data
        environment:
            - "POSTGRES_USER=api"
            - "POSTGRES_PASSWORD=secret"
            - "POSTGRES_DB=api"
        ports:
            - "54321:5432"
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
    mailer:
        image: mailhog/mailhog
        restart: unless-stopped
        ports:
            - "1025:1025"
            - "8082:8025"
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
    storage-nginx:
        build:
            context: ./storage/docker
            dockerfile: nginx.docker
        volumes:
            - ./storage:/var/www/storage
        ports:
            - "8083:80"
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
    websocket-nodejs:
        image: node:10.11-jessie
        volumes:
            - ./websocket:/var/www/websocket
        ports:
            - "8084:8000"
        working_dir: /var/www/websocket
        tty: true
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
    rabbitmq:
        image: rabbitmq:3-management
        environment:
            RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
            RABBITMQ_DEFAULT_USER: rabbit
            RABBITMQ_DEFAULT_PASS: rabbit
        ports:
            - "8085:15672"
            - "5672:5672"
        volumes:
            - ./rabbitmq/docker/enabled_plugins:/etc/rabbitmq/enabled_plugins